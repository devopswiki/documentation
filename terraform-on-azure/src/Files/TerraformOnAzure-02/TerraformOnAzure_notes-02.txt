
Terraform on AZURE FROM UDEMY (see https://www.udemy.com/course/terraform-on-azure-services/)


SRC: 
	- Udemy url: https://www.udemy.com/course/terraform-on-azure-services/
	- terraform url: https://www.terraform.io/
	- terraform edition: https://developer.hashicorp.com/terraform/intro/terraform-editions
	- code Url https://att-c.udemycdn.com/2022-06-23_05-30-32-27ca8d24344ae03cb03fbe17a055a20c/original.zip?response-content-disposition=attachment%3B+filename%3DCode.zip&Expires=1726510450&Signature=ah19LVAL4NKAlyRcuqdZXgAbli8frpLWqdGv069y3KHu~ZnG~uMruKf1lDv0M~DmhqknYAaYDMPmcJ6JWgp74lOXq77rAKrnPt1VvXBUxfCaC-sk7aQowEZWPF~zaXR-LBk1~QbG-VuKb4tLKN8l7EhayVsJUx4lI2rZwaHC62JBVnsN6XKecA9py8bDnEESSgsN7BNrPt9uj4jc4nunGWWnMPc0UCSKRsKVcCSOmA0KHgWEiKR4Qg5IHRZoYd1B-79xwuPoXTrBEa8VRq2K7Hqg4GzkN-07N3sZ5~idv3~SiUGLHMxwaRv8LQW~P~~630S6Tr38JO2qs4tXe4EM8Q__&Key-Pair-Id=K3MG148K9RIRF4
GitHub SRC: https://github.com/DevopsExamples00/TerraformAzure


You can download a PDF version of the slides shown in this course. Also the diagrams shown in this course are also attached as images.
Resources for this lecture
 - https://att-c.udemycdn.com/2022-10-12_08-28-21-d54b832876849cb57f913305cad05514/original.pdf?response-content-disposition=attachment%3B+filename%3DDiagrams-v112.pdf&Expires=1726512731&Signature=URrMAj9AwLGUZjDdMfXsouEM5ruq0ku-erYCj7vo~cAKeRcjS9CqGrFg3MbcXnIfJSRssjIeUbspMvtTgJfagaxWEk4rZ3HiOZaZ5YK0Y5m-7SzqbHFx9UosOmNWAEi7VbEvbGmO5~L-CYV3AuW3E3AmQUNIzjXaEkrzcS8Bayx60lGs-u7VjLReu9iEU762FUC6kl5VFHbUkNRyc1kqEm3gl0cTM9Hjr3Mr4~UXG16H7fKKJ69w~nnPgKRo2fIN5Tb2wJMNN1NCPwcDwvFCXyWCYKJE63y~L9TUgem7hTsI8A6UZJWb55Fqugq8TH8p0Hqnq8wkxONB3vXsNglqSA__&Key-Pair-Id=K3MG148K9RIRF4
 - https://att-c.udemycdn.com/2022-10-12_08-28-11-f32991fe61efa27f9bb28bef49ef6b4d/original.pdf?response-content-disposition=attachment%3B+filename%3DSlides-v111.pdf&Expires=1726512728&Signature=kAvjxcLTyDrZCBrXE-VOj5YH2g7PkA6qzLgZa6Nl2WVh6Dvs8fK8p1jU7iViDobp1~FSG7bZpb0KPTq9pRGGfn7VT5q8C103kC3o-YZZ0NkVdyGA0U9O32iH-pW03hzYciZFS-CS7N2AIQyIvkVHz9f6npN23tBkB4L1KZX6oNftY6yrHcI2G~nm8F-B-FdlpxnHX-TIui0w6h9ciQrdUisLRiHVantnjs6h6xJy8GjnMWVeANVHu0FI1VvXfJ-2KG35aiHr890XAtAEA-mplmGYmePDejt7yBrjUSE1Iw8LJv4adbM8Cs8yk4~jrA~-5GYAxRUnp7zvlpo21qPP4A__&Key-Pair-Id=K3MG148K9RIRF4


1- Defining the provider 

	URL of providers: https://registry.terraform.io/browse/providers
	Example:  How to use the AZURE provider (https://registry.terraform.io/providers/hashicorp/azurerm/latest)

	To install this provider, copy and paste this code into your Terraform configuration. Then, run terraform init.

	terraform {
	  required_providers {
		azurerm = {
		  source = "hashicorp/azurerm"
		  version = "4.2.0"
		}
	  }
	}

	provider "azurerm" {
	  # Configuration options
	}

2- Authenticating to Azure Active Directory

	Terraform supports a number of different methods for authenticating to Azure Active Directory: (see https://registry.terraform.io/providers/hashicorp/azuread/latest/docs#authenticating-to-azure-active-directory)

	1- Authenticating to Azure Active Directory using the Azure CLI
	2- Authenticating to Azure Active Directory using Managed Identity
	3- Authenticating to Azure Active Directory using a Service Principal and a Client Certificate
	4- Authenticating to Azure Active Directory using a Service Principal and a Client Secret
	
	

		### 1. **Authenticating using Azure CLI**

		Terraform can authenticate using credentials from the Azure CLI, which is a convenient option for local development.

		**Steps:**
		1. Log in to Azure via the CLI:
		   ```bash
		   az login
		   ```

		2. Use the Azure CLI credentials in Terraform:

		```hcl
		provider "azurerm" {
		  features = {}
		}

		provider "azuread" {}
		```

		**Explanation:**
		- Terraform automatically uses the credentials from the Azure CLI session for authentication.


		### 2. **Authenticating using Managed Identity**

		Managed Identity allows Azure resources like VMs or App Services to authenticate with Azure AD without needing credentials.

		**Example:**
		1. Assign a managed identity to a VM in Azure.

		2. Configure Terraform to use this managed identity:

		```hcl
		provider "azurerm" {
		  features = {}
		  use_msi = true
		}

		provider "azuread" {
		  use_msi = true
		}
		```

		**Explanation:**
		- The `use_msi = true` directive allows Terraform to authenticate using the managed identity associated with the VM.


		### 3. **Authenticating using a Service Principal and a Client Certificate**

		A Service Principal with a certificate is more secure than using a client secret and is often used in production environments.

		**Example:**
		1. Create a Service Principal and issue a certificate.

		2. Configure Terraform to use the certificate for authentication:

		```hcl
		provider "azurerm" {
		  features = {}
		  client_id                    = "your-client-id"
		  tenant_id                    = "your-tenant-id"
		  client_certificate_path      = "path/to/certificate.pfx"
		  client_certificate_password  = "your-certificate-password"
		}

		provider "azuread" {
		  client_id               = "your-client-id"
		  tenant_id               = "your-tenant-id"
		  client_certificate_path = "path/to/certificate.pfx"
		}
		```

		**Explanation:**
		- The `client_certificate_path` and `client_certificate_password` allow Terraform to authenticate using a secure certificate.


		### 4. **Authenticating using a Service Principal and a Client Secret**

		This method uses a client secret for authentication, commonly used for automation and CI/CD pipelines.

		**Example:**
		1. Create a Service Principal with a client secret.

		2. Configure Terraform to use the client secret:

		```hcl
		provider "azurerm" {
		  features = {}
		  client_id     = "your-client-id"
		  client_secret = "your-client-secret"
		  tenant_id     = "your-tenant-id"
		}

		provider "azuread" {
		  client_id     = "your-client-id"
		  client_secret = "your-client-secret"
		  tenant_id     = "your-tenant-id"
		}
		```

		**Explanation:**
		- The `client_id`, `client_secret`, and `tenant_id` values authenticate Terraform using the Service Principalâ€™s credentials.


